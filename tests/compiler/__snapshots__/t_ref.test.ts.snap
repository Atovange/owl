// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`t-ref can get a dynamic ref on a node 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<div><span block-ref=\\"0\\"/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const refs = ctx.__owl__.refs;
    const v1 = ctx['id'];
    let ref1 = (el) => refs[\`myspan\${v1}\`] = el;
    return block1([ref1]);
  }
}"
`;

exports[`t-ref can get a dynamic ref on a node, alternate syntax 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<div><span block-ref=\\"0\\"/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const refs = ctx.__owl__.refs;
    const v1 = ctx['id'];
    let ref1 = (el) => refs[\`myspan\${v1}\`] = el;
    return block1([ref1]);
  }
}"
`;

exports[`t-ref can get a ref on a node 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<div><span block-ref=\\"0\\"/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const refs = ctx.__owl__.refs;
    const ref1 = (el) => refs[\`myspan\`] = el;
    return block1([ref1]);
  }
}"
`;

exports[`t-ref ref in a t-call 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  const callTemplate_1 = app.getTemplate(\`sub\`);
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    return block1([], [b2]);
  }
}"
`;

exports[`t-ref ref in a t-call 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<div>1<span block-ref=\\"0\\"/>2</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const refs = ctx.__owl__.refs;
    const ref1 = (el) => refs[\`name\`] = el;
    return block1([ref1]);
  }
}"
`;

exports[`t-ref ref in a t-if 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block3 = createBlock(\`<div>
 <block-child-0/>
 </div>\`);
  let block6 = createBlock(\`<span block-ref=\\"0\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const refs = ctx.__owl__.refs;
    const ref1 = (el) => refs[\`name\`] = el;
    const b2 = text(\`
 \`);
    let b4;
    if (ctx['condition']) {
      const b5 = text(\`
 \`);
      const b6 = block6([ref1]);
      const b7 = text(\`
 \`);
      b4 = multi([b5, b6, b7]);
    }
    const b3 = block3([], [b4]);
    return multi([b2, b3]);
  }
}"
`;

exports[`t-ref refs in a loop 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { prepareList, withKey } = helpers;
  
  let block1 = createBlock(\`<div>
 <block-child-0/>
 </div>\`);
  let block5 = createBlock(\`<div block-ref=\\"0\\"><block-text-1/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const refs = ctx.__owl__.refs;
    ctx = Object.create(ctx);
    const [k_block2, v_block2, l_block2, c_block2] = prepareList(ctx['items']);;
    for (let i1 = 0; i1 < l_block2; i1++) {
      ctx[\`item\`] = v_block2[i1];
      const key1 = ctx['item'];
      const b4 = text(\`
 \`);
      const tKey_1 = ctx['item'];
      const v1 = ctx['item'];
      let ref1 = (el) => refs[(v1)] = el;
      let txt1 = ctx['item'];
      const b5 = toggler(tKey_1, block5([ref1, txt1]));
      const b6 = text(\`
 \`);
      c_block2[i1] = withKey(multi([b4, b5, b6]), key1);
    }
    ctx = ctx.__proto__;
    const b2 = list(c_block2);
    return block1([], [b2]);
  }
}"
`;

exports[`t-ref two refs, one in a t-if 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block3 = createBlock(\`<div>
 <block-child-0/>
 <p block-ref=\\"0\\"/>
 </div>\`);
  let block6 = createBlock(\`<span block-ref=\\"0\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const refs = ctx.__owl__.refs;
    const ref1 = (el) => refs[\`name\`] = el;
    const ref2 = (el) => refs[\`p\`] = el;
    const b2 = text(\`
 \`);
    let b4;
    if (ctx['condition']) {
      const b5 = text(\`
 \`);
      const b6 = block6([ref1]);
      const b7 = text(\`
 \`);
      b4 = multi([b5, b6, b7]);
    }
    const b3 = block3([ref2], [b4]);
    return multi([b2, b3]);
  }
}"
`;

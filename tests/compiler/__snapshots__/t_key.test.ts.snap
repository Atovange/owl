// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`t-key can use t-key directive on a node 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-text-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const tKey_1 = ctx['beer'].id;
    let txt1 = ctx['beer'].name;
    return toggler(tKey_1, block1([txt1]));
  }
}"
`;

exports[`t-key can use t-key directive on a node 2 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-text-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const tKey_1 = ctx['beer'].id;
    let txt1 = ctx['beer'].name;
    return toggler(tKey_1, block1([txt1]));
  }
}"
`;

exports[`t-key can use t-key directive on a node as a function 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<div><block-text-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const tKey_1 = ctx['getKey'](ctx['beer']);
    let txt1 = ctx['beer'].name;
    return toggler(tKey_1, block1([txt1]));
  }
}"
`;

exports[`t-key t-key directive in a list 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { prepareList, withKey } = helpers;
  
  let block1 = createBlock(\`<ul>
 <block-child-0/>
 </ul>\`);
  let block3 = createBlock(\`<li><block-text-0/></li>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    const [k_block2, v_block2, l_block2, c_block2] = prepareList(ctx['beers']);;
    for (let i1 = 0; i1 < l_block2; i1++) {
      ctx[\`beer\`] = v_block2[i1];
      const key1 = ctx['beer'].id;
      let txt1 = ctx['beer'].name;
      c_block2[i1] = withKey(block3([txt1]), key1);
    }
    ctx = ctx.__proto__;
    const b2 = list(c_block2);
    return block1([], [b2]);
  }
}"
`;

exports[`t-key t-key on sub dom node pushes a child block in its parent 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block3 = createBlock(\`<div>
 <block-child-0/>
 <block-child-1/>
 </div>\`);
  let block4 = createBlock(\`<span/>\`);
  let block5 = createBlock(\`<div><h1/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = text(\`
 \`);
    let b4,b5;
    if (ctx['hasSpan']) {
      b4 = block4();
    }
    const tKey_1 = ctx['key'];
    b5 = toggler(tKey_1, block5());
    const b3 = block3([], [b4, b5]);
    const b6 = text(\`
 \`);
    return multi([b2, b3, b6]);
  }
}"
`;

exports[`t-key t-key on sub dom node pushes a child block in its parent 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<div><h1/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const tKey_1 = ctx['key'];
    return toggler(tKey_1, block1());
  }
}"
`;

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`t-call (template calling) basic caller 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  const callTemplate_1 = app.getTemplate(\`_basic-callee\`);
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    return block1([], [b2]);
  }
}"
`;

exports[`t-call (template calling) basic caller 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<span>ok</span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`t-call (template calling) basic caller, no parent node 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  const callTemplate_1 = app.getTemplate(\`_basic-callee\`);
  
  return function template(ctx, node, key = \\"\\") {
    return callTemplate_1.call(this, ctx, node, key + \`__1\`);
  }
}"
`;

exports[`t-call (template calling) basic caller, no parent node 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<span>ok</span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`t-call (template calling) call with several sub nodes on same line 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { isBoundary, zero } = helpers;
  const callTemplate_1 = app.getTemplate(\`sub\`);
  
  let block3 = createBlock(\`<div>
 <block-child-0/>
 </div>\`);
  let block6 = createBlock(\`<span>hey</span>\`);
  let block8 = createBlock(\`<span>yay</span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = text(\`
 \`);
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1;
    const b5 = text(\`
 \`);
    const b6 = block6();
    const b7 = text(\` \`);
    const b8 = block8();
    const b9 = text(\`
 \`);
    const b4 = multi([b5, b6, b7, b8, b9]);
    ctx[zero] = b4;
    const b10 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    ctx = ctx.__proto__;
    const b3 = block3([], [b10]);
    return multi([b2, b3]);
  }
}"
`;

exports[`t-call (template calling) call with several sub nodes on same line 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { zero } = helpers;
  
  let block3 = createBlock(\`<div>
 <block-child-0/>
 </div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = text(\`
 \`);
    const b4 = ctx[zero];
    const b3 = block3([], [b4]);
    return multi([b2, b3]);
  }
}"
`;

exports[`t-call (template calling) cascading t-call t-out='0' 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { isBoundary, zero } = helpers;
  const callTemplate_1 = app.getTemplate(\`subTemplate\`);
  
  let block3 = createBlock(\`<div>
 <block-child-0/>
 </div>\`);
  let block6 = createBlock(\`<span>hey</span>\`);
  let block8 = createBlock(\`<span>yay</span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = text(\`
 \`);
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1;
    const b5 = text(\`
 \`);
    const b6 = block6();
    const b7 = text(\` \`);
    const b8 = block8();
    const b9 = text(\`
 \`);
    const b4 = multi([b5, b6, b7, b8, b9]);
    ctx[zero] = b4;
    const b10 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    ctx = ctx.__proto__;
    const b3 = block3([], [b10]);
    return multi([b2, b3]);
  }
}"
`;

exports[`t-call (template calling) cascading t-call t-out='0' 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { isBoundary, zero } = helpers;
  const callTemplate_1 = app.getTemplate(\`subSubTemplate\`);
  
  let block3 = createBlock(\`<div>
 <block-child-0/>
 </div>\`);
  let block6 = createBlock(\`<span>cascade 0</span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = text(\`
 \`);
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1;
    const b5 = text(\`
 \`);
    const b6 = block6();
    const b7 = text(\`
 \`);
    const b8 = ctx[zero];
    const b9 = text(\`
 \`);
    const b4 = multi([b5, b6, b7, b8, b9]);
    ctx[zero] = b4;
    const b10 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    ctx = ctx.__proto__;
    const b3 = block3([], [b10]);
    return multi([b2, b3]);
  }
}"
`;

exports[`t-call (template calling) cascading t-call t-out='0' 3`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { isBoundary, zero } = helpers;
  const callTemplate_1 = app.getTemplate(\`finalTemplate\`);
  
  let block3 = createBlock(\`<div>
 <block-child-0/>
 </div>\`);
  let block6 = createBlock(\`<span>cascade 1</span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = text(\`
 \`);
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1;
    const b5 = text(\`
 \`);
    const b6 = block6();
    const b7 = text(\`
 \`);
    const b8 = ctx[zero];
    const b9 = text(\`
 \`);
    const b4 = multi([b5, b6, b7, b8, b9]);
    ctx[zero] = b4;
    const b10 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    ctx = ctx.__proto__;
    const b3 = block3([], [b10]);
    return multi([b2, b3]);
  }
}"
`;

exports[`t-call (template calling) cascading t-call t-out='0' 4`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { zero } = helpers;
  
  let block3 = createBlock(\`<div>
 <span>cascade 2</span>
 <block-child-0/>
 </div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = text(\`
 \`);
    const b4 = ctx[zero];
    const b3 = block3([], [b4]);
    return multi([b2, b3]);
  }
}"
`;

exports[`t-call (template calling) cascading t-call t-out='0', without external divs 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { isBoundary, zero } = helpers;
  const callTemplate_1 = app.getTemplate(\`subTemplate\`);
  
  let block5 = createBlock(\`<span>hey</span>\`);
  let block7 = createBlock(\`<span>yay</span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = text(\`
 \`);
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1;
    const b4 = text(\`
 \`);
    const b5 = block5();
    const b6 = text(\` \`);
    const b7 = block7();
    const b8 = text(\`
 \`);
    const b3 = multi([b4, b5, b6, b7, b8]);
    ctx[zero] = b3;
    const b9 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    return multi([b2, b9]);
  }
}"
`;

exports[`t-call (template calling) cascading t-call t-out='0', without external divs 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { isBoundary, zero } = helpers;
  const callTemplate_1 = app.getTemplate(\`subSubTemplate\`);
  
  let block5 = createBlock(\`<span>cascade 0</span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = text(\`
 \`);
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1;
    const b4 = text(\`
 \`);
    const b5 = block5();
    const b6 = text(\`
 \`);
    const b7 = ctx[zero];
    const b8 = text(\`
 \`);
    const b3 = multi([b4, b5, b6, b7, b8]);
    ctx[zero] = b3;
    const b9 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    return multi([b2, b9]);
  }
}"
`;

exports[`t-call (template calling) cascading t-call t-out='0', without external divs 3`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { isBoundary, zero } = helpers;
  const callTemplate_1 = app.getTemplate(\`finalTemplate\`);
  
  let block5 = createBlock(\`<span>cascade 1</span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = text(\`
 \`);
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1;
    const b4 = text(\`
 \`);
    const b5 = block5();
    const b6 = text(\`
 \`);
    const b7 = ctx[zero];
    const b8 = text(\`
 \`);
    const b3 = multi([b4, b5, b6, b7, b8]);
    ctx[zero] = b3;
    const b9 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    return multi([b2, b9]);
  }
}"
`;

exports[`t-call (template calling) cascading t-call t-out='0', without external divs 4`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { zero } = helpers;
  
  let block3 = createBlock(\`<span>cascade 2</span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = text(\`
 \`);
    const b3 = block3();
    const b4 = text(\`
 \`);
    const b5 = ctx[zero];
    return multi([b2, b3, b4, b5]);
  }
}"
`;

exports[`t-call (template calling) dynamic t-call 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  const call = app.callTemplate.bind(app);
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const template1 = (ctx['template']);
    const b2 = call(this, template1, ctx, node, key + \`__1\`);
    return block1([], [b2]);
  }
}"
`;

exports[`t-call (template calling) dynamic t-call 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<foo><block-text-0/></foo>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let txt1 = ctx['val'];
    return block1([txt1]);
  }
}"
`;

exports[`t-call (template calling) dynamic t-call 3`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<bar><block-text-0/></bar>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let txt1 = ctx['val'];
    return block1([txt1]);
  }
}"
`;

exports[`t-call (template calling) inherit context 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { isBoundary, withDefault, setContextValue } = helpers;
  const callTemplate_1 = app.getTemplate(\`sub\`);
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    setContextValue(ctx, \\"foo\\", 1);
    const b2 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    return block1([], [b2]);
  }
}"
`;

exports[`t-call (template calling) inherit context 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  return function template(ctx, node, key = \\"\\") {
    return text(ctx['foo']);
  }
}"
`;

exports[`t-call (template calling) recursive template, part 1 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  const callTemplate_1 = app.getTemplate(\`recursive\`);
  
  let block3 = createBlock(\`<div>
 <span>hey</span>
 <block-child-0/>
 </div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = text(\`
 \`);
    let b4;
    if (false) {
      const b5 = text(\`
 \`);
      const b6 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
      const b7 = text(\`
 \`);
      b4 = multi([b5, b6, b7]);
    }
    const b3 = block3([], [b4]);
    return multi([b2, b3]);
  }
}"
`;

exports[`t-call (template calling) recursive template, part 2 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { isBoundary, withDefault, setContextValue, zero } = helpers;
  const callTemplate_1 = app.getTemplate(\`nodeTemplate\`);
  
  let block3 = createBlock(\`<div>
 <block-child-0/>
 </div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    const b2 = text(\`
 \`);
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1;
    const b5 = text(\`
 \`);
    setContextValue(ctx, \\"node\\", ctx['root']);
    const b6 = text(\`
 \`);
    const b4 = multi([b5, b6]);
    ctx[zero] = b4;
    const b7 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    ctx = ctx.__proto__;
    const b3 = block3([], [b7]);
    return multi([b2, b3]);
  }
}"
`;

exports[`t-call (template calling) recursive template, part 2 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { prepareList, isBoundary, withDefault, setContextValue, zero, withKey } = helpers;
  const callTemplate_1 = app.getTemplate(\`nodeTemplate\`);
  
  let block3 = createBlock(\`<div>
 <p><block-text-0/></p>
 <block-child-0/>
 </div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    const b2 = text(\`
 \`);
    let txt1 = ctx['node'].val;
    ctx = Object.create(ctx);
    const [k_block4, v_block4, l_block4, c_block4] = prepareList(ctx['node'].children||[]);;
    for (let i1 = 0; i1 < l_block4; i1++) {
      ctx[\`subtree\`] = v_block4[i1];
      ctx[\`subtree_first\`] = i1 === 0;
      ctx[\`subtree_last\`] = i1 === v_block4.length - 1;
      ctx[\`subtree_index\`] = i1;
      ctx[\`subtree_value\`] = k_block4[i1];
      const key1 = ctx['subtree_index'];
      const b6 = text(\`
 \`);
      ctx = Object.create(ctx);
      ctx[isBoundary] = 1;
      const b8 = text(\`
 \`);
      setContextValue(ctx, \\"node\\", ctx['subtree']);
      const b9 = text(\`
 \`);
      const b7 = multi([b8, b9]);
      ctx[zero] = b7;
      const b10 = callTemplate_1.call(this, ctx, node, key + \`__1__\${key1}\`);
      ctx = ctx.__proto__;
      const b11 = text(\`
 \`);
      c_block4[i1] = withKey(multi([b6, b10, b11]), key1);
    }
    ctx = ctx.__proto__;
    const b4 = list(c_block4);
    const b3 = block3([txt1], [b4]);
    return multi([b2, b3]);
  }
}"
`;

exports[`t-call (template calling) recursive template, part 3 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { isBoundary, withDefault, setContextValue, zero } = helpers;
  const callTemplate_1 = app.getTemplate(\`nodeTemplate\`);
  
  let block3 = createBlock(\`<div>
 <block-child-0/>
 </div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    const b2 = text(\`
 \`);
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1;
    const b5 = text(\`
 \`);
    setContextValue(ctx, \\"node\\", ctx['root']);
    const b6 = text(\`
 \`);
    const b4 = multi([b5, b6]);
    ctx[zero] = b4;
    const b7 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    ctx = ctx.__proto__;
    const b3 = block3([], [b7]);
    return multi([b2, b3]);
  }
}"
`;

exports[`t-call (template calling) recursive template, part 3 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { prepareList, isBoundary, withDefault, setContextValue, zero, withKey } = helpers;
  const callTemplate_1 = app.getTemplate(\`nodeTemplate\`);
  
  let block3 = createBlock(\`<div>
 <p><block-text-0/></p>
 <block-child-0/>
 </div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    const b2 = text(\`
 \`);
    let txt1 = ctx['node'].val;
    ctx = Object.create(ctx);
    const [k_block4, v_block4, l_block4, c_block4] = prepareList(ctx['node'].children||[]);;
    for (let i1 = 0; i1 < l_block4; i1++) {
      ctx[\`subtree\`] = v_block4[i1];
      ctx[\`subtree_first\`] = i1 === 0;
      ctx[\`subtree_last\`] = i1 === v_block4.length - 1;
      ctx[\`subtree_index\`] = i1;
      ctx[\`subtree_value\`] = k_block4[i1];
      const key1 = ctx['subtree_index'];
      const b6 = text(\`
 \`);
      ctx = Object.create(ctx);
      ctx[isBoundary] = 1;
      const b8 = text(\`
 \`);
      setContextValue(ctx, \\"node\\", ctx['subtree']);
      const b9 = text(\`
 \`);
      const b7 = multi([b8, b9]);
      ctx[zero] = b7;
      const b10 = callTemplate_1.call(this, ctx, node, key + \`__1__\${key1}\`);
      ctx = ctx.__proto__;
      const b11 = text(\`
 \`);
      c_block4[i1] = withKey(multi([b6, b10, b11]), key1);
    }
    ctx = ctx.__proto__;
    const b4 = list(c_block4);
    const b3 = block3([txt1], [b4]);
    return multi([b2, b3]);
  }
}"
`;

exports[`t-call (template calling) recursive template, part 4: with t-set recursive index 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { isBoundary, withDefault, setContextValue, zero } = helpers;
  const callTemplate_1 = app.getTemplate(\`nodeTemplate\`);
  
  let block3 = createBlock(\`<div>
 <block-child-0/>
 </div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    const b2 = text(\`
 \`);
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1;
    const b5 = text(\`
 \`);
    setContextValue(ctx, \\"recursive_idx\\", 1);
    const b6 = text(\`
 \`);
    setContextValue(ctx, \\"node\\", ctx['root']);
    const b7 = text(\`
 \`);
    const b4 = multi([b5, b6, b7]);
    ctx[zero] = b4;
    const b8 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    ctx = ctx.__proto__;
    const b3 = block3([], [b8]);
    return multi([b2, b3]);
  }
}"
`;

exports[`t-call (template calling) recursive template, part 4: with t-set recursive index 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { isBoundary, withDefault, setContextValue, prepareList, zero, withKey } = helpers;
  const callTemplate_1 = app.getTemplate(\`nodeTemplate\`);
  
  let block3 = createBlock(\`<div>
 
 <p><block-text-0/> <block-text-1/></p>
 <block-child-0/>
 </div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    const b2 = text(\`
 \`);
    setContextValue(ctx, \\"recursive_idx\\", ctx['recursive_idx']+1);
    let txt1 = ctx['node'].val;
    let txt2 = ctx['recursive_idx'];
    ctx = Object.create(ctx);
    const [k_block4, v_block4, l_block4, c_block4] = prepareList(ctx['node'].children||[]);;
    for (let i1 = 0; i1 < l_block4; i1++) {
      ctx[\`subtree\`] = v_block4[i1];
      ctx[\`subtree_first\`] = i1 === 0;
      ctx[\`subtree_last\`] = i1 === v_block4.length - 1;
      ctx[\`subtree_index\`] = i1;
      ctx[\`subtree_value\`] = k_block4[i1];
      const key1 = ctx['subtree_index'];
      const b6 = text(\`
 \`);
      ctx = Object.create(ctx);
      ctx[isBoundary] = 1;
      const b8 = text(\`
 \`);
      setContextValue(ctx, \\"node\\", ctx['subtree']);
      const b9 = text(\`
 \`);
      const b7 = multi([b8, b9]);
      ctx[zero] = b7;
      const b10 = callTemplate_1.call(this, ctx, node, key + \`__1__\${key1}\`);
      ctx = ctx.__proto__;
      const b11 = text(\`
 \`);
      c_block4[i1] = withKey(multi([b6, b10, b11]), key1);
    }
    ctx = ctx.__proto__;
    const b4 = list(c_block4);
    const b3 = block3([txt1, txt2], [b4]);
    return multi([b2, b3]);
  }
}"
`;

exports[`t-call (template calling) scoped parameters 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { isBoundary, withDefault, setContextValue, zero } = helpers;
  const callTemplate_1 = app.getTemplate(\`sub\`);
  
  let block3 = createBlock(\`<div>
 <block-child-0/>
 <block-text-0/>
 </div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    const b2 = text(\`
 \`);
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1;
    const b5 = text(\`
 \`);
    setContextValue(ctx, \\"foo\\", 42);
    const b6 = text(\`
 \`);
    const b4 = multi([b5, b6]);
    ctx[zero] = b4;
    const b7 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    ctx = ctx.__proto__;
    let txt1 = ctx['foo'];
    const b3 = block3([txt1], [b7]);
    return multi([b2, b3]);
  }
}"
`;

exports[`t-call (template calling) scoped parameters 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  return function template(ctx, node, key = \\"\\") {
    return text(\`ok\`);
  }
}"
`;

exports[`t-call (template calling) scoped parameters, part 2 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { isBoundary, withDefault, setContextValue, zero } = helpers;
  const callTemplate_1 = app.getTemplate(\`sub\`);
  
  let block3 = createBlock(\`<div>
 
 <block-child-0/>
 <block-text-0/>
 </div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    const b2 = text(\`
 \`);
    setContextValue(ctx, \\"foo\\", 11);
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1;
    const b5 = text(\`
 \`);
    setContextValue(ctx, \\"foo\\", 42);
    const b6 = text(\`
 \`);
    const b4 = multi([b5, b6]);
    ctx[zero] = b4;
    const b7 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    ctx = ctx.__proto__;
    let txt1 = ctx['foo'];
    const b3 = block3([txt1], [b7]);
    return multi([b2, b3]);
  }
}"
`;

exports[`t-call (template calling) scoped parameters, part 2 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  return function template(ctx, node, key = \\"\\") {
    return text(ctx['foo']);
  }
}"
`;

exports[`t-call (template calling) t-call allowed on a non t node 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  const callTemplate_1 = app.getTemplate(\`sub\`);
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    return block1([], [b2]);
  }
}"
`;

exports[`t-call (template calling) t-call allowed on a non t node 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<span>ok</span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`t-call (template calling) t-call on a div with t-call-context 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  const callTemplate_1 = app.getTemplate(\`sub\`);
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let ctx1 = ctx['obj'];
    const b2 = callTemplate_1.call(this, ctx1, node, key + \`__1\`);
    return block1([], [b2]);
  }
}"
`;

exports[`t-call (template calling) t-call on a div with t-call-context 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<span><block-text-0/></span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let txt1 = ctx['value'];
    return block1([txt1]);
  }
}"
`;

exports[`t-call (template calling) t-call with body content as root of a template 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { isBoundary, zero } = helpers;
  const callTemplate_1 = app.getTemplate(\`antony\`);
  
  let block1 = createBlock(\`<p>antony</p>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1;
    const b1 = block1();
    ctx[zero] = b1;
    return callTemplate_1.call(this, ctx, node, key + \`__1\`);
  }
}"
`;

exports[`t-call (template calling) t-call with body content as root of a template 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { zero } = helpers;
  
  let block1 = createBlock(\`<foo><block-child-0/></foo>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = ctx[zero];
    return block1([], [b2]);
  }
}"
`;

exports[`t-call (template calling) t-call with t-if 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  const callTemplate_1 = app.getTemplate(\`sub\`);
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let b2;
    if (ctx['flag']) {
      b2 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    }
    return block1([], [b2]);
  }
}"
`;

exports[`t-call (template calling) t-call with t-if 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<span>ok</span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`t-call (template calling) t-call with t-set inside and body text content 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { isBoundary, withDefault, setContextValue, zero } = helpers;
  const callTemplate_1 = app.getTemplate(\`sub\`);
  
  let block3 = createBlock(\`<div>
 <block-child-0/>
 </div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    const b2 = text(\`
 \`);
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1;
    const b5 = text(\`
 \`);
    setContextValue(ctx, \\"val\\", \`yip yip\`);
    const b6 = text(\`
 \`);
    const b4 = multi([b5, b6]);
    ctx[zero] = b4;
    const b7 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    ctx = ctx.__proto__;
    const b3 = block3([], [b7]);
    return multi([b2, b3]);
  }
}"
`;

exports[`t-call (template calling) t-call with t-set inside and body text content 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<p><block-text-0/></p>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let txt1 = ctx['val'];
    return block1([txt1]);
  }
}"
`;

exports[`t-call (template calling) t-call with t-set inside and outside 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { prepareList, isBoundary, withDefault, setContextValue, zero, withKey } = helpers;
  const callTemplate_1 = app.getTemplate(\`sub\`);
  
  let block3 = createBlock(\`<div>
 <block-child-0/>
 </div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    const b2 = text(\`
 \`);
    ctx = Object.create(ctx);
    const [k_block4, v_block4, l_block4, c_block4] = prepareList(ctx['list']);;
    for (let i1 = 0; i1 < l_block4; i1++) {
      ctx[\`v\`] = v_block4[i1];
      ctx[\`v_first\`] = i1 === 0;
      ctx[\`v_last\`] = i1 === v_block4.length - 1;
      ctx[\`v_index\`] = i1;
      ctx[\`v_value\`] = k_block4[i1];
      const key1 = ctx['v_index'];
      const b6 = text(\`
 \`);
      setContextValue(ctx, \\"val\\", ctx['v'].val);
      const b7 = text(\`
 \`);
      ctx = Object.create(ctx);
      ctx[isBoundary] = 1;
      const b9 = text(\`
 \`);
      setContextValue(ctx, \\"val3\\", ctx['val']*3);
      const b10 = text(\`
 \`);
      const b8 = multi([b9, b10]);
      ctx[zero] = b8;
      const b11 = callTemplate_1.call(this, ctx, node, key + \`__1__\${key1}\`);
      ctx = ctx.__proto__;
      const b12 = text(\`
 \`);
      c_block4[i1] = withKey(multi([b6, b7, b11, b12]), key1);
    }
    ctx = ctx.__proto__;
    const b4 = list(c_block4);
    const b3 = block3([], [b4]);
    return multi([b2, b3]);
  }
}"
`;

exports[`t-call (template calling) t-call with t-set inside and outside 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block4 = createBlock(\`<span><block-text-0/></span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = text(\`
 \`);
    const b3 = text(\`
 \`);
    let txt1 = ctx['val3'];
    const b4 = block4([txt1]);
    const b5 = text(\`
 \`);
    return multi([b2, b3, b4, b5]);
  }
}"
`;

exports[`t-call (template calling) t-call with t-set inside and outside. 2 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { isBoundary, withDefault, setContextValue } = helpers;
  const callTemplate_1 = app.getTemplate(\`main\`);
  
  let block1 = createBlock(\`<p><block-child-0/></p>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    setContextValue(ctx, \\"w\\", 'fromwrapper');
    const b2 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    return block1([], [b2]);
  }
}"
`;

exports[`t-call (template calling) t-call with t-set inside and outside. 2 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { prepareList, isBoundary, withDefault, setContextValue, zero, withKey } = helpers;
  const callTemplate_1 = app.getTemplate(\`sub\`);
  
  let block3 = createBlock(\`<div>
 <block-child-0/>
 </div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    const b2 = text(\`
 \`);
    ctx = Object.create(ctx);
    const [k_block4, v_block4, l_block4, c_block4] = prepareList(ctx['list']);;
    for (let i1 = 0; i1 < l_block4; i1++) {
      ctx[\`v\`] = v_block4[i1];
      ctx[\`v_first\`] = i1 === 0;
      ctx[\`v_last\`] = i1 === v_block4.length - 1;
      ctx[\`v_index\`] = i1;
      ctx[\`v_value\`] = k_block4[i1];
      const key1 = ctx['v_index'];
      const b6 = text(\`
 \`);
      setContextValue(ctx, \\"val\\", ctx['v'].val);
      const b7 = text(\`
 \`);
      ctx = Object.create(ctx);
      ctx[isBoundary] = 1;
      const b9 = text(\`
 \`);
      setContextValue(ctx, \\"val3\\", ctx['val']*3);
      const b10 = text(\`
 \`);
      const b8 = multi([b9, b10]);
      ctx[zero] = b8;
      const b11 = callTemplate_1.call(this, ctx, node, key + \`__1__\${key1}\`);
      ctx = ctx.__proto__;
      const b12 = text(\`
 \`);
      c_block4[i1] = withKey(multi([b6, b7, b11, b12]), key1);
    }
    ctx = ctx.__proto__;
    const b4 = list(c_block4);
    const b3 = block3([], [b4]);
    return multi([b2, b3]);
  }
}"
`;

exports[`t-call (template calling) t-call with t-set inside and outside. 2 3`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block4 = createBlock(\`<span><block-text-0/></span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = text(\`
 \`);
    const b3 = text(\`
 \`);
    let txt1 = ctx['val3'];
    const b4 = block4([txt1]);
    const b5 = text(\`
 \`);
    const b6 = text(ctx['w']);
    const b7 = text(\`
 \`);
    return multi([b2, b3, b4, b5, b6, b7]);
  }
}"
`;

exports[`t-call (template calling) t-call, conditional and t-set in t-call body 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { isBoundary, withDefault, setContextValue, zero } = helpers;
  const callTemplate_1 = app.getTemplate(\`callee1\`);
  const callTemplate_2 = app.getTemplate(\`callee2\`);
  
  let block3 = createBlock(\`<div>
 
 <block-child-0/><block-child-1/>
 </div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    const b2 = text(\`
 \`);
    let b4,b8;
    setContextValue(ctx, \\"v1\\", 'elif');
    if (ctx['v1']==='if') {
      b4 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    } else if (ctx['v1']==='elif') {
      ctx = Object.create(ctx);
      ctx[isBoundary] = 1;
      const b6 = text(\`
 \`);
      setContextValue(ctx, \\"v\\", 'success');
      const b7 = text(\`
 \`);
      const b5 = multi([b6, b7]);
      ctx[zero] = b5;
      b8 = callTemplate_2.call(this, ctx, node, key + \`__2\`);
      ctx = ctx.__proto__;
    }
    const b3 = block3([], [b4, b8]);
    return multi([b2, b3]);
  }
}"
`;

exports[`t-call (template calling) t-call, conditional and t-set in t-call body 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<div>callee1</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`t-call (template calling) t-call, conditional and t-set in t-call body 3`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<div>callee2 <block-text-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let txt1 = ctx['v'];
    return block1([txt1]);
  }
}"
`;

exports[`t-call (template calling) t-call-context 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  const callTemplate_1 = app.getTemplate(\`sub\`);
  
  return function template(ctx, node, key = \\"\\") {
    let ctx1 = ctx['obj'];
    return callTemplate_1.call(this, ctx1, node, key + \`__1\`);
  }
}"
`;

exports[`t-call (template calling) t-call-context 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<span><block-text-0/></span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let txt1 = ctx['value'];
    return block1([txt1]);
  }
}"
`;

exports[`t-call (template calling) t-call-context and value in body 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { isBoundary, withDefault, setContextValue, zero } = helpers;
  const callTemplate_1 = app.getTemplate(\`sub\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    const b2 = text(\`
 \`);
    let ctx1 = ctx['obj'];
    ctx1 = Object.create(ctx1);
    ctx1[isBoundary] = 1;
    const b4 = text(\`
 \`);
    setContextValue(ctx, \\"value2\\", ctx['aaron']);
    const b5 = text(\`
 \`);
    const b3 = multi([b4, b5]);
    ctx1[zero] = b3;
    const b6 = callTemplate_1.call(this, ctx1, node, key + \`__1\`);
    return multi([b2, b6]);
  }
}"
`;

exports[`t-call (template calling) t-call-context and value in body 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<span><block-text-0/><block-text-1/></span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let txt1 = ctx['value1'];
    let txt2 = ctx['value2'];
    return block1([txt1, txt2]);
  }
}"
`;

exports[`t-call (template calling) t-esc inside t-call, with t-set outside 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { isBoundary, withDefault, setContextValue } = helpers;
  const callTemplate_1 = app.getTemplate(\`sub\`);
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    setContextValue(ctx, \\"v\\", \`Hi\`);
    const b2 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    return block1([], [b2]);
  }
}"
`;

exports[`t-call (template calling) t-esc inside t-call, with t-set outside 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<span><block-text-0/></span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let txt1 = ctx['v'];
    return block1([txt1]);
  }
}"
`;

exports[`t-call (template calling) with unused body 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { isBoundary, zero } = helpers;
  const callTemplate_1 = app.getTemplate(\`sub\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1;
    const b1 = text(\`WHEEE\`);
    ctx[zero] = b1;
    return callTemplate_1.call(this, ctx, node, key + \`__1\`);
  }
}"
`;

exports[`t-call (template calling) with unused body 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<div>ok</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`t-call (template calling) with unused setbody 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { isBoundary, withDefault, setContextValue } = helpers;
  const callTemplate_1 = app.getTemplate(\`sub\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1;
    setContextValue(ctx, \\"qux\\", 3);
    return callTemplate_1.call(this, ctx, node, key + \`__1\`);
  }
}"
`;

exports[`t-call (template calling) with unused setbody 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<div>ok</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`t-call (template calling) with used body 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { isBoundary, zero } = helpers;
  const callTemplate_1 = app.getTemplate(\`sub\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1;
    const b1 = text(\`ok\`);
    ctx[zero] = b1;
    return callTemplate_1.call(this, ctx, node, key + \`__1\`);
  }
}"
`;

exports[`t-call (template calling) with used body 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { zero } = helpers;
  
  let block1 = createBlock(\`<h1><block-text-0/></h1>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let txt1 = ctx[zero];
    return block1([txt1]);
  }
}"
`;

exports[`t-call (template calling) with used setbody 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { isBoundary, withDefault, setContextValue } = helpers;
  const callTemplate_1 = app.getTemplate(\`sub\`);
  
  let block1 = createBlock(\`<span><block-child-0/></span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1;
    setContextValue(ctx, \\"foo\\", 'ok');
    const b2 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    return block1([], [b2]);
  }
}"
`;

exports[`t-call (template calling) with used setbody 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  return function template(ctx, node, key = \\"\\") {
    return text(ctx['foo']);
  }
}"
`;

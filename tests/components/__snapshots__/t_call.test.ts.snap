// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`t-call dynamic t-call 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { isBoundary, zero } = helpers;
  const call = app.callTemplate.bind(app);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = text(\`
 \`);
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1;
    const b3 = text(\`
 owl
 \`);
    ctx[zero] = b3;
    const template1 = (ctx['current'].template);
    const b4 = call(this, template1, ctx, node, key + \`__1\`);
    return multi([b2, b4]);
  }
}"
`;

exports[`t-call dynamic t-call 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<div>foo</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`t-call dynamic t-call 3`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  return function template(ctx, node, key = \\"\\") {
    return text(\`bar\`);
  }
}"
`;

exports[`t-call dynamic t-call: key is propagated 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  const comp1 = app.createComponent(\`Child\`, true, false, false, true);
  const call = app.callTemplate.bind(app);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = comp1({}, key + \`__1\`, node, this, null);
    const template1 = (ctx['sub']);
    const b3 = call(this, template1, ctx, node, key + \`__2\`);
    return multi([b2, b3]);
  }
}"
`;

exports[`t-call dynamic t-call: key is propagated 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<div block-attribute-0=\\"id\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let attr1 = ctx['id'];
    return block1([attr1]);
  }
}"
`;

exports[`t-call dynamic t-call: key is propagated 3`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  const comp1 = app.createComponent(\`Child\`, true, false, false, true);
  
  return function template(ctx, node, key = \\"\\") {
    return comp1({}, key + \`__1\`, node, this, null);
  }
}"
`;

exports[`t-call handlers are properly bound through a dynamic t-call 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  const call = app.callTemplate.bind(app);
  
  let block3 = createBlock(\`<div><block-child-0/><block-text-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = text(\`
 \`);
    const template1 = ('__template__999');
    const b4 = call(this, template1, ctx, node, key + \`__1\`);
    let txt1 = ctx['counter'];
    const b3 = block3([txt1], [b4]);
    return multi([b2, b3]);
  }
}"
`;

exports[`t-call handlers are properly bound through a dynamic t-call 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<p block-handler-0=\\"click\\">lucas</p>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let hdlr1 = [()=>this.update(), ctx];
    return block1([hdlr1]);
  }
}"
`;

exports[`t-call handlers are properly bound through a t-call 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  const callTemplate_1 = app.getTemplate(\`__template__999\`);
  
  let block3 = createBlock(\`<div><block-child-0/><block-text-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = text(\`
 \`);
    const b4 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    let txt1 = ctx['counter'];
    const b3 = block3([txt1], [b4]);
    return multi([b2, b3]);
  }
}"
`;

exports[`t-call handlers are properly bound through a t-call 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<p block-handler-0=\\"click\\">lucas</p>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let hdlr1 = [ctx['update'], ctx];
    return block1([hdlr1]);
  }
}"
`;

exports[`t-call handlers with arguments are properly bound through a t-call 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  const callTemplate_1 = app.getTemplate(\`__template__999\`);
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    return block1([], [b2]);
  }
}"
`;

exports[`t-call handlers with arguments are properly bound through a t-call 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<p block-handler-0=\\"click\\">lucas</p>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const v1 = ctx['a'];
    let hdlr1 = [()=>this.update(v1), ctx];
    return block1([hdlr1]);
  }
}"
`;

exports[`t-call parent is set within t-call 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  const callTemplate_1 = app.getTemplate(\`__template__999\`);
  
  let block1 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    return block1([], [b2]);
  }
}"
`;

exports[`t-call parent is set within t-call 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  const comp1 = app.createComponent(\`Child\`, true, false, false, true);
  
  return function template(ctx, node, key = \\"\\") {
    return comp1({}, key + \`__1\`, node, this, null);
  }
}"
`;

exports[`t-call parent is set within t-call 3`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<span>lucas</span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`t-call parent is set within t-call with no parentNode 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  const callTemplate_1 = app.getTemplate(\`__template__999\`);
  
  return function template(ctx, node, key = \\"\\") {
    return callTemplate_1.call(this, ctx, node, key + \`__1\`);
  }
}"
`;

exports[`t-call parent is set within t-call with no parentNode 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  const comp1 = app.createComponent(\`Child\`, true, false, false, true);
  
  return function template(ctx, node, key = \\"\\") {
    return comp1({}, key + \`__1\`, node, this, null);
  }
}"
`;

exports[`t-call parent is set within t-call with no parentNode 3`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<span>lucas</span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`t-call recursive t-call binding this -- static t-call 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { isBoundary, withDefault, setContextValue } = helpers;
  const callTemplate_1 = app.getTemplate(\`recursive\`);
  
  let block3 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    const b2 = text(\`
 \`);
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1;
    setContextValue(ctx, \\"level\\", 0);
    const b4 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
    ctx = ctx.__proto__;
    const b3 = block3([], [b4]);
    const b5 = text(\`
 \`);
    return multi([b2, b3, b5]);
  }
}"
`;

exports[`t-call recursive t-call binding this -- static t-call 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { isBoundary, withDefault, setContextValue, zero } = helpers;
  const callTemplate_1 = app.getTemplate(\`recursive\`);
  
  let block5 = createBlock(\`<div block-handler-0=\\"click.stop\\"><block-text-1/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    ctx[isBoundary] = 1
    let b2,b3,b12;
    b2 = text(\`
 \`);
    if (ctx['level']<2) {
      const b4 = text(\`
 \`);
      let hdlr1 = [\\"stop\\", ctx['onClicked'].bind(this), ctx];
      let txt1 = ctx['level'];
      const b5 = block5([hdlr1, txt1]);
      const b6 = text(\`
 \`);
      ctx = Object.create(ctx);
      ctx[isBoundary] = 1;
      const b8 = text(\`
 \`);
      setContextValue(ctx, \\"level\\", ctx['level']+1);
      const b9 = text(\`
 \`);
      const b7 = multi([b8, b9]);
      ctx[zero] = b7;
      const b10 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
      ctx = ctx.__proto__;
      const b11 = text(\`
 \`);
      b3 = multi([b4, b5, b6, b10, b11]);
    }
    b12 = text(\`
 \`);
    return multi([b2, b3, b12]);
  }
}"
`;

exports[`t-call sub components in two t-calls 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  const callTemplate_1 = app.getTemplate(\`sub\`);
  const callTemplate_2 = app.getTemplate(\`sub\`);
  
  let block7 = createBlock(\`<div><block-child-0/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let b2,b3,b7;
    b2 = text(\`
 \`);
    if (ctx['state'].val===1) {
      const b4 = text(\`
 \`);
      const b5 = callTemplate_1.call(this, ctx, node, key + \`__1\`);
      const b6 = text(\`
 \`);
      b3 = multi([b4, b5, b6]);
    } else {
      const b8 = callTemplate_2.call(this, ctx, node, key + \`__2\`);
      b7 = block7([], [b8]);
    }
    return multi([b2, b3, b7]);
  }
}"
`;

exports[`t-call sub components in two t-calls 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  const comp1 = app.createComponent(\`Child\`, true, false, false, false);
  
  return function template(ctx, node, key = \\"\\") {
    return comp1({val: ctx['state'].val}, key + \`__1\`, node, this, null);
  }
}"
`;

exports[`t-call sub components in two t-calls 3`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<span><block-text-0/></span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let txt1 = ctx['props'].val;
    return block1([txt1]);
  }
}"
`;

exports[`t-call t-call in t-foreach and children component 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { prepareList, withKey } = helpers;
  const callTemplate_1 = app.getTemplate(\`__template__999\`);
  
  let block3 = createBlock(\`<div>
 <block-child-0/>
 </div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = text(\`
 \`);
    ctx = Object.create(ctx);
    const [k_block4, v_block4, l_block4, c_block4] = prepareList(['a','b','c']);;
    for (let i1 = 0; i1 < l_block4; i1++) {
      ctx[\`val\`] = v_block4[i1];
      ctx[\`val_first\`] = i1 === 0;
      ctx[\`val_last\`] = i1 === v_block4.length - 1;
      ctx[\`val_index\`] = i1;
      ctx[\`val_value\`] = k_block4[i1];
      const key1 = ctx['val'];
      const b6 = text(\`
 \`);
      const b7 = callTemplate_1.call(this, ctx, node, key + \`__1__\${key1}\`);
      const b8 = text(\`
 \`);
      c_block4[i1] = withKey(multi([b6, b7, b8]), key1);
    }
    ctx = ctx.__proto__;
    const b4 = list(c_block4);
    const b3 = block3([], [b4]);
    return multi([b2, b3]);
  }
}"
`;

exports[`t-call t-call in t-foreach and children component 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  const comp1 = app.createComponent(\`Child\`, true, false, false, false);
  
  return function template(ctx, node, key = \\"\\") {
    return comp1({val: ctx['val']}, key + \`__1\`, node, this, null);
  }
}"
`;

exports[`t-call t-call in t-foreach and children component 3`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<span><block-text-0/></span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let txt1 = ctx['props'].val;
    return block1([txt1]);
  }
}"
`;

exports[`t-call t-call with t-call-context and subcomponent 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  const callTemplate_1 = app.getTemplate(\`someTemplate\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = text(\`
 \`);
    let ctx1 = ctx['subctx'];
    const b3 = callTemplate_1.call(this, ctx1, node, key + \`__1\`);
    return multi([b2, b3]);
  }
}"
`;

exports[`t-call t-call with t-call-context and subcomponent 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  const comp1 = app.createComponent(\`Child\`, true, false, false, false);
  const comp2 = app.createComponent(\`Child\`, true, false, false, false);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = text(\`
 \`);
    const b3 = comp1({name: ctx['aab']}, key + \`__1\`, node, this, null);
    const b4 = text(\`
 \`);
    const b5 = comp2({name: ctx['lpe']}, key + \`__2\`, node, this, null);
    const b6 = text(\`
 \`);
    return multi([b2, b3, b4, b5, b6]);
  }
}"
`;

exports[`t-call t-call with t-call-context and subcomponent 3`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = text(\`child\`);
    const b3 = text(ctx['props'].name);
    return multi([b2, b3]);
  }
}"
`;

exports[`t-call t-call with t-call-context, simple use 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  const callTemplate_1 = app.getTemplate(\`someTemplate\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = text(\`
 \`);
    let ctx1 = ctx['subctx'];
    const b3 = callTemplate_1.call(this, ctx1, node, key + \`__1\`);
    return multi([b2, b3]);
  }
}"
`;

exports[`t-call t-call with t-call-context, simple use 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = text(ctx['aab']);
    const b3 = text(ctx['lpe']);
    return multi([b2, b3]);
  }
}"
`;

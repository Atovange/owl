// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`event handling Invalid handler throws an error 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<button block-handler-0=\\"click\\">click</button>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let hdlr1 = [ctx['dosomething'], ctx];
    return block1([hdlr1]);
  }
}"
`;

exports[`event handling handler is not called if component is destroyed 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<span block-handler-0=\\"click\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let hdlr1 = [ctx['click'], ctx];
    return block1([hdlr1]);
  }
}"
`;

exports[`event handling handler receive the event as argument 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  const comp1 = app.createComponent(\`Child\`, true, false, false, true);
  
  let block1 = createBlock(\`<span block-handler-0=\\"click\\"><block-child-0/><block-text-1/></span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let hdlr1 = [ctx['inc'], ctx];
    const b2 = comp1({}, key + \`__1\`, node, this, null);
    let txt1 = ctx['state'].value;
    return block1([hdlr1, txt1], [b2]);
  }
}"
`;

exports[`event handling handler receive the event as argument 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<div>simple vnode</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`event handling input blur event is not called if component is destroyed 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  const comp1 = app.createComponent(\`Child\`, true, false, false, true);
  
  let block3 = createBlock(\`<div>
 <block-child-0/>
 <textarea/>
 </div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = text(\`
 \`);
    let b4;
    if (ctx['state'].cond) {
      b4 = comp1({}, key + \`__1\`, node, this, null);
    }
    const b3 = block3([], [b4]);
    return multi([b2, b3]);
  }
}"
`;

exports[`event handling input blur event is not called if component is destroyed 2`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block1 = createBlock(\`<input block-handler-0=\\"blur\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let hdlr1 = [ctx['blur'], ctx];
    return block1([hdlr1]);
  }
}"
`;

exports[`event handling objects from scope are properly captured by t-on 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { prepareList, withKey } = helpers;
  
  let block3 = createBlock(\`<div>
 <block-child-0/>
 </div>\`);
  let block7 = createBlock(\`<div class=\\"item\\" block-handler-0=\\"click\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = text(\`
 \`);
    ctx = Object.create(ctx);
    const [k_block4, v_block4, l_block4, c_block4] = prepareList(ctx['items']);;
    for (let i1 = 0; i1 < l_block4; i1++) {
      ctx[\`item\`] = v_block4[i1];
      const key1 = ctx['item'];
      const b6 = text(\`
 \`);
      const v1 = ctx['onClick'];
      const v2 = ctx['item'];
      let hdlr1 = [_ev=>v1(v2.val,_ev), ctx];
      const b7 = block7([hdlr1]);
      const b8 = text(\`
 \`);
      c_block4[i1] = withKey(multi([b6, b7, b8]), key1);
    }
    ctx = ctx.__proto__;
    const b4 = list(c_block4);
    const b3 = block3([], [b4]);
    return multi([b2, b3]);
  }
}"
`;

exports[`event handling support for callable expression in event handler 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  
  let block3 = createBlock(\`<div><block-text-0/><input type=\\"text\\" block-handler-1=\\"input\\"/></div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = text(\`
 \`);
    let txt1 = ctx['state'].value;
    let hdlr1 = [ctx['obj'].onInput, ctx];
    const b3 = block3([txt1, hdlr1]);
    return multi([b2, b3]);
  }
}"
`;

exports[`event handling t-on with handler bound to dynamic argument on a t-foreach 1`] = `
"function anonymous(app, bdom, helpers
) {
  let { text, createBlock, list, multi, html, toggler, comment } = bdom;
  let { prepareList, withKey } = helpers;
  
  let block3 = createBlock(\`<div>
 <block-child-0/>
 </div>\`);
  let block7 = createBlock(\`<div class=\\"item\\" block-handler-0=\\"click\\"/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    const b2 = text(\`
 \`);
    ctx = Object.create(ctx);
    const [k_block4, v_block4, l_block4, c_block4] = prepareList(ctx['items']);;
    for (let i1 = 0; i1 < l_block4; i1++) {
      ctx[\`item\`] = v_block4[i1];
      const key1 = ctx['item'];
      const b6 = text(\`
 \`);
      const v1 = ctx['onClick'];
      const v2 = ctx['item'];
      let hdlr1 = [_ev=>v1(v2,_ev), ctx];
      const b7 = block7([hdlr1]);
      const b8 = text(\`
 \`);
      c_block4[i1] = withKey(multi([b6, b7, b8]), key1);
    }
    ctx = ctx.__proto__;
    const b4 = list(c_block4);
    const b3 = block3([], [b4]);
    return multi([b2, b3]);
  }
}"
`;
